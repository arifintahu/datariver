{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nilai","temp","ph","turbid","ecs","time","status","data","handleClick","bind","assertThisInitialized","e","preventDefault","randomData","kirimData","push","dataTemp","Math","floor","random","datapH","dataTurbid","dataECS","dataTime","Date","setState","prevState","objectSpread","toGMTString","urlGET","Axios","get","then","res","console","log","_this2","catch","err","react_default","a","createElement","className","onClick","App_ListData","React","Component","ListData","map","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAIMA,cACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,CACLC,KAAO,EACPC,GAAI,EACJC,OAAS,EACTC,IAAK,EACLC,KAAK,GACLC,QAAQ,GAEVC,KAAK,IAEPf,EAAKgB,YAAchB,EAAKgB,YAAYC,KAAjBhB,OAAAiB,EAAA,EAAAjB,CAAAD,IAbHA,mHAgBAmB,0EAChBA,EAAEC,0BACIjB,KAAKkB,oCACLlB,KAAKmB,mCACLnB,KAAKI,MAAMQ,KAAKQ,KAAKpB,KAAKI,MAAMC,4QAIlCgB,EAAWC,KAAKC,MAAkC,IAAV,GAAhBD,KAAKE,SAAiB,KAAQ,GACtDC,EAASH,KAAKC,MAAiC,IAAT,GAAhBD,KAAKE,SAAiB,IAAO,GACnDE,EAAaJ,KAAKC,MAAoB,IAAdD,KAAKE,UAC7BG,EAAUL,KAAKC,MAAoB,IAAdD,KAAKE,UAC1BI,EAAW,IAAIC,cACb7B,KAAK8B,SAAU,SAAAC,GAAS,MAAI,CAChC1B,MAAKP,OAAAkC,EAAA,EAAAlC,CAAA,GAAOiC,EAAU1B,MAAjB,CACKC,KAAMe,EACNd,GAAIkB,EACJjB,OAAQkB,EACRjB,IAAKkB,EACLjB,KAAMkB,EAASK,cACftB,QAAQ,yQAKhBuB,8EAA8ElC,KAAKI,MAAMC,MAAMC,wBAAeN,KAAKI,MAAMC,MAAME,sBAAaP,KAAKI,MAAMC,MAAMG,0BAAiBR,KAAKI,MAAMC,MAAMI,cAE7L0B,IAAMC,IAAIF,GACbG,KAAM,SAACC,GACY,MAAfA,EAAI3B,SACL4B,QAAQC,IAAI,WAAY,IAAIX,MAC5BY,EAAKX,SAAU,SAAAC,GAAS,MAAI,CAC1B1B,MAAKP,OAAAkC,EAAA,EAAAlC,CAAA,GAAOiC,EAAU1B,MAAjB,CACKM,QAAQ,UAIvB+B,MAAO,SAACC,GACPJ,QAAQC,IAAIG,wIAKhB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,UAAQE,QAAShD,KAAKa,aAAtB,SACA+B,EAAAC,EAAAC,cAACG,EAAD,CAAUrC,KAAMZ,KAAKI,MAAMQ,gBAjEnBsC,IAAMC,WAwElBC,mLAEF,OACER,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACX/C,KAAKJ,MAAMgB,KAAKyC,IAAI,SAAAzC,GACnB,OACEgC,EAAAC,EAAAC,cAAA,MAAIQ,IAAK1C,EAAKF,MACZkC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YAAOlC,EAAKF,KAAZ,OAA2BkC,EAAAC,EAAAC,cAAA,YAAOlC,EAAKN,KAAZ,OAA2BsC,EAAAC,EAAAC,cAAA,YAAOlC,EAAKL,GAAZ,OAAyBqC,EAAAC,EAAAC,cAAA,YAAOlC,EAAKJ,OAAZ,OAA6BoC,EAAAC,EAAAC,cAAA,YAAOlC,EAAKH,iBARjHyC,IAAMC,WAkBdxD,IClFK4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.81d9ca0e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Axios from 'axios';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      nilai: {\n        temp : 0,\n        ph: 0,\n        turbid : 0,\n        ecs: 0,\n        time:'',\n        status: false\n      },\n      data:[]\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n  \n  async handleClick(e){\n    e.preventDefault()\n    await this.randomData()\n    await this.kirimData()\n    await this.state.data.push(this.state.nilai)\n  }\n\n  async randomData(){\n    let dataTemp = Math.floor(((Math.random() * 10) + 20)*10)/10\n    let datapH = Math.floor(((Math.random() * 40) + 4)*10)/10\n    let dataTurbid = Math.floor(Math.random()*3000)\n    let dataECS = Math.floor(Math.random()*1000)\n    let dataTime = new Date()\n    await this.setState( prevState =>({\n      nilai : {...prevState.nilai, \n                temp: dataTemp, \n                ph: datapH, \n                turbid: dataTurbid, \n                ecs: dataECS,\n                time: dataTime.toGMTString(),\n                status: false}\n    }))\n  }\n\n  async kirimData(){\n    let urlGET = `https://api.thingspeak.com/update?api_key=A1ZGPSBBWXTLIA0H&field1=${this.state.nilai.temp}&field2=${this.state.nilai.ph}&field3=${this.state.nilai.turbid}&field4=${this.state.nilai.ecs}`\n   \n    await Axios.get(urlGET)\n      .then( (res) => {\n        if(res.status === 200){\n          console.log('Success ', new Date())\n          this.setState( prevState =>({\n            nilai : {...prevState.nilai, \n                      status: true}\n          }))\n        }\n      })\n      .catch( (err) => {\n        console.log(err)\n      })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Log Data River Monitoring</p>\n          <button onClick={this.handleClick}>Kirim</button>\n          <ListData data={this.state.data} />\n        </header>\n      </div>\n    );\n  }\n}\n\nclass ListData extends React.Component {\n  render(){\n    return(\n      <ul className=\"data-list\">                 \n        {this.props.data.map(data => {\n          return (\n            <li key={data.time}>\n              <div>\n                <span>{data.time} - </span><span>{data.temp} - </span><span>{data.ph} - </span><span>{data.turbid} - </span><span>{data.ecs}</span>\n              </div>\n            </li>\n          )\n        })}\n      </ul>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}